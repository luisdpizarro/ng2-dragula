{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://ng2-dragula/EventTypes.ts","ng://ng2-dragula/Group.ts","ng://ng2-dragula/DrakeFactory.ts","ng://ng2-dragula/components/dragula.service.ts","ng://ng2-dragula/components/dragula.directive.ts","ng://ng2-dragula/components/dragula.module.ts","ng://ng2-dragula/MockDrake.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","EventTypes","name","drake","options","this","initEvents","AllEvents","keys","map","k","dragula","dragulaExpt.default","dragulaExpt","DrakeFactory","build","filterEvent","eventType","filterDragType","projector","input","pipe","filter","_a","event","undefined","args","elContainerSourceProjector","_b","el","container","source","DragulaService","drakeFactory","_this","dispatch$","Subject","drag","groupName","Drag","dragend","DragEnd","drop","Drop","sibling","elContainerSource","cancel","Cancel","remove","Remove","shadow","Shadow","over","Over","out","Out","cloned","Cloned","clone","original","cloneType","dropModel","DropModel","item","sourceModel","targetModel","sourceIndex","targetIndex","removeModel","RemoveModel","groups","paramIndex","decorator","prototype","add","group","find","Error","handleModels","setupEvents","destroy","createGroup","Group","dragElm","dragIndex","dropIndex","on","models","containers","indexOf","slice","splice","domIndexOf","dropElm","isCopying","copyItem","removeChild","forEach","_i","child","parent","Array","children","Injectable","tslib_1.__param","Optional","DragulaDirective","dragulaService","dragulaModelChange","EventEmitter","nativeElement","ngOnChanges","changes","prev","previousValue","current","currentValue","hasNewValue","firstChange","teardown","setup","dragulaModel","prevIndex","checkModel","subscribe","subs","Subscription","emit","unsubscribe","itemToRemove","modelIndex","ngOnDestroy","tslib_1.__decorate","Input","Output","Directive","selector","ElementRef","DragulaModule","forRoot","ngModule","DragulaModule_1","providers","NgModule","exports","declarations","MockDrakeFactory","MockDrake","dragging","emitter$","start","end","revert","callback","apply","concat","__spread"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum EventTypes {\n    Cancel = \"cancel\",\n    Cloned = \"cloned\",\n    Drag = \"drag\",\n    DragEnd = \"dragend\",\n    Drop = \"drop\",\n    Out = \"out\",\n    Over = \"over\",\n    Remove = \"remove\",\n    Shadow = \"shadow\",\n    DropModel = \"dropModel\",\n    RemoveModel = \"removeModel\",\n}\n\nexport const AllEvents: EventTypes[] = Object.keys(EventTypes).map(k => EventTypes[k as any] as EventTypes);\n\n\n","import { DrakeWithModels } from \"./DrakeWithModels\";\nimport { DragulaOptions } from \"./DragulaOptions\";\n\nexport class Group {\n  public initEvents: boolean = false;\n  constructor(\n    public name: string,\n    public drake: DrakeWithModels,\n    public options: DragulaOptions\n  ) {}\n}\n","import { DragulaOptions } from './DragulaOptions';\nimport { DrakeWithModels } from './DrakeWithModels';\nimport * as dragulaExpt from 'dragula';\nexport const dragula: (containers?: any, options?: any) => any = (dragulaExpt as any).default || dragulaExpt;\n\nexport type DrakeBuilder = (containers: any[], options: DragulaOptions) => DrakeWithModels;\n\nexport class DrakeFactory {\n  constructor (public build: DrakeBuilder = dragula) {}\n}\n\n","import { Injectable, Optional } from '@angular/core';\nimport { Group } from '../Group';\nimport { DragulaOptions } from '../DragulaOptions';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { EventTypes, AllEvents } from '../EventTypes';\nimport { DrakeFactory } from '../DrakeFactory';\n\ntype FilterProjector<T extends { name: string; }> = (name: string, args: any[]) => T;\ntype Dispatch = { event: EventTypes; name: string; args: any[]; };\n\nconst filterEvent = <T extends { name: string; }>(\n  eventType: EventTypes,\n  filterDragType: string | undefined,\n  projector: FilterProjector<T>\n) => (input: Observable<Dispatch>): Observable<T> => {\n  return input.pipe(\n    filter(({ event, name }) => {\n      return event === eventType\n          && (filterDragType === undefined || name === filterDragType);\n    }),\n    map(({ name, args }) => projector(name, args))\n  );\n}\n\nconst elContainerSourceProjector =\n  (name: string, [el, container, source]: [Element, Element, Element]) =>\n    ({ name, el, container, source });\n\n@Injectable()\nexport class DragulaService {\n\n  /* https://github.com/bevacqua/dragula#drakeon-events */\n\n  private dispatch$ = new Subject<Dispatch>();\n\n  public drag = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Drag,\n      groupName,\n      (name, [el, source]: [Element, Element]) => ({ name, el, source })\n    )\n  );\n\n  public dragend = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.DragEnd,\n      groupName,\n      (name, [el]: [Element]) => ({ name, el })\n    )\n  );\n\n  public drop = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Drop,\n      groupName,\n      (name, [\n        el, target, source, sibling\n      ]: [Element, Element, Element, Element]) => {\n        return { name, el, target, source, sibling };\n      })\n  );\n\n  private elContainerSource =\n    (eventType: EventTypes) =>\n    (groupName?: string) =>\n    this.dispatch$.pipe(\n      filterEvent(eventType, groupName, elContainerSourceProjector)\n    );\n\n  public cancel = this.elContainerSource(EventTypes.Cancel);\n  public remove = this.elContainerSource(EventTypes.Remove);\n  public shadow = this.elContainerSource(EventTypes.Shadow);\n  public over = this.elContainerSource(EventTypes.Over);\n  public out = this.elContainerSource(EventTypes.Out);\n\n  public cloned = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Cloned,\n      groupName,\n      (name, [\n        clone, original, cloneType\n      ]: [Element, Element, 'mirror' | 'copy']) => {\n        return { name, clone, original, cloneType }\n      })\n  );\n\n  public dropModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.DropModel,\n      groupName,\n      (name, [\n        el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex\n      ]: [Element, Element, Element, Element, T, T[], T[], number, number]) => {\n        return { name, el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex }\n      })\n  );\n\n  public removeModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.RemoveModel,\n      groupName,\n      (name, [\n        el, container, source, item, sourceModel, sourceIndex\n      ]: [Element, Element, Element, T, T[], number]) => {\n        return { name, el, container, source, item, sourceModel, sourceIndex }\n      }\n    )\n  );\n\n  private groups: { [k: string]: Group } = {};\n\n  constructor (@Optional() private drakeFactory: DrakeFactory = null) {\n    if (this.drakeFactory === null) {\n      this.drakeFactory = new DrakeFactory();\n    }\n  }\n\n  /** Public mainly for testing purposes. Prefer `createGroup()`. */\n  public add(group: Group): Group {\n    let existingGroup = this.find(group.name);\n    if (existingGroup) {\n      throw new Error('Group named: \"' + group.name + '\" already exists.');\n    }\n    this.groups[group.name] = group;\n    this.handleModels(group);\n    this.setupEvents(group);\n    return group;\n  }\n\n  public find(name: string): Group {\n    return this.groups[name];\n  }\n\n  public destroy(name: string): void {\n    let group = this.find(name);\n    if (!group) {\n      return;\n    }\n    group.drake && group.drake.destroy();\n    delete this.groups[name];\n  }\n\n  /**\n   * Creates a group with the specified name and options.\n   *\n   * Note: formerly known as `setOptions`\n   */\n  public createGroup<T = any>(name: string, options: DragulaOptions<T>): Group {\n    return this.add(new Group(\n      name,\n      this.drakeFactory.build([], options),\n      options\n    ));\n  }\n\n  private handleModels({ name, drake, options }: Group): void {\n    let dragElm: any;\n    let dragIndex: number;\n    let dropIndex: number;\n    drake.on('remove', (el: any, container: any, source: any) => {\n      if (!drake.models) {\n        return;\n      }\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\n      sourceModel = sourceModel.slice(0); // clone it\n      const item = sourceModel.splice(dragIndex, 1)[0];\n      // console.log('REMOVE');\n      // console.log(sourceModel);\n      this.dispatch$.next({\n        event: EventTypes.RemoveModel,\n        name,\n        args: [ el, container, source, item, sourceModel, dragIndex ]\n      });\n    });\n    drake.on('drag', (el: any, source: any) => {\n      if (!drake.models) {\n        return;\n      }\n      dragElm = el;\n      dragIndex = this.domIndexOf(el, source);\n    });\n    drake.on('drop', (dropElm: any, target: Element, source: Element, sibling?: Element) => {\n      if (!drake.models || !target) {\n        return;\n      }\n      dropIndex = this.domIndexOf(dropElm, target);\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\n      let targetModel = drake.models[drake.containers.indexOf(target)];\n      // console.log('DROP');\n      // console.log(sourceModel);\n      let item: any;\n      if (target === source) {\n        sourceModel = sourceModel.slice(0)\n        item = sourceModel.splice(dragIndex, 1)[0];\n        sourceModel.splice(dropIndex, 0, item);\n        // this was true before we cloned and updated sourceModel,\n        // but targetModel still has the old value\n        targetModel = sourceModel;\n      } else {\n        let isCopying = dragElm !== dropElm;\n        item = sourceModel[dragIndex];\n        if (isCopying) {\n          if (!options.copyItem) {\n            throw new Error(\"If you have enabled `copy` on a group, you must provide a `copyItem` function.\")\n          }\n          item = options.copyItem(item);\n        }\n\n        if (!isCopying) {\n          sourceModel = sourceModel.slice(0)\n          sourceModel.splice(dragIndex, 1);\n        }\n        targetModel = targetModel.slice(0)\n        targetModel.splice(dropIndex, 0, item);\n        if (isCopying) {\n          try {\n            target.removeChild(dropElm);\n          } catch (e) {}\n        }\n      }\n      this.dispatch$.next({\n        event: EventTypes.DropModel,\n        name,\n        args: [ dropElm, target, source, sibling, item, sourceModel, targetModel, dragIndex, dropIndex ]\n      });\n    });\n  }\n\n  private setupEvents(group: Group): void {\n    if (group.initEvents) {\n      return;\n    }\n    group.initEvents = true;\n    const name = group.name;\n    let that: any = this;\n    let emitter = (event: EventTypes) => {\n      group.drake.on(event, (...args: any[]) => {\n        this.dispatch$.next({ event, name, args });\n      });\n    };\n    AllEvents.forEach(emitter);\n  }\n\n  private domIndexOf(child: any, parent: any): any {\n    return Array.prototype.indexOf.call(parent.children, child);\n  }\n}\n","import { Directive, Input, Output, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChange, EventEmitter } from '@angular/core';\nimport { DragulaService } from './dragula.service';\nimport { DrakeWithModels } from '../DrakeWithModels';\nimport { Subscription } from 'rxjs';\nimport { Group } from '../Group';\n\n@Directive({selector: '[dragula]'})\nexport class DragulaDirective implements OnChanges, OnDestroy {\n  @Input() public dragula: string;\n  @Input() public dragulaModel: any[];\n  @Output() public dragulaModelChange = new EventEmitter<any[]>();\n\n  private subs: Subscription;\n\n  private get container(): HTMLElement {\n    return this.el && this.el.nativeElement;\n  }\n  private group: Group;\n\n  public constructor(private el: ElementRef, private dragulaService: DragulaService) {\n  }\n\n  public ngOnChanges(changes: {dragula?: SimpleChange, dragulaModel?: SimpleChange}): void {\n    if (changes && changes.dragula) {\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragula;\n      let hadPreviousValue = !!prev;\n      let hasNewValue = !!current;\n      // something -> null       =>  teardown only\n      // something -> something  =>  teardown, then setup\n      //      null -> something  =>  setup only\n      //\n      //      null -> null (precluded by fact of change being present)\n      if (hadPreviousValue) {\n        this.teardown(prev);\n      }\n      if (hasNewValue) {\n        this.setup();\n      }\n    } else if (changes && changes.dragulaModel) {\n      // this code only runs when you're not changing the group name\n      // because if you're changing the group name, you'll be doing setup or teardown\n      // it also only runs if there is a group name to attach to.\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragulaModel;\n      const { drake } = this.group;\n      if (this.dragula && drake) {\n        drake.models = drake.models || [];\n        let prevIndex = drake.models.indexOf(prev);\n        if (prevIndex !== -1) {\n          // delete the previous\n          drake.models.splice(prevIndex, 1);\n          // maybe insert a new one at the same spot\n          if (!!current) {\n            drake.models.splice(prevIndex, 0, current);\n          }\n        } else if (!!current) {\n          // no previous one to remove; just push this one.\n          drake.models.push(current);\n        }\n      }\n    }\n  }\n\n  // call ngOnInit 'setup' because we want to call it in ngOnChanges\n  // and it would otherwise run twice\n  public setup(): void {\n    let checkModel = (group: Group) => {\n      if (this.dragulaModel) {\n        if (group.drake.models) {\n          group.drake.models.push(this.dragulaModel);\n        } else {\n          group.drake.models = [this.dragulaModel];\n        }\n      }\n    };\n\n    // find or create a group\n    let group = this.dragulaService.find(this.dragula);\n    if (!group) {\n      let options = {};\n      group = this.dragulaService.createGroup(this.dragula, options);\n    }\n\n    // ensure model and container element are pushed\n    checkModel(group);\n    group.drake.containers.push(this.container);\n    this.subscribe(this.dragula);\n\n    this.group = group;\n  }\n\n  public subscribe(name: string) {\n    this.subs = new Subscription();\n    this.subs.add(\n      this.dragulaService\n      .dropModel(name)\n      .subscribe(({ source, target, sourceModel, targetModel }) => {\n        if (source === this.el.nativeElement) {\n          this.dragulaModelChange.emit(sourceModel);\n        } else if (target === this.el.nativeElement) {\n          this.dragulaModelChange.emit(targetModel);\n        }\n      })\n    );\n    this.subs.add(\n      this.dragulaService\n      .removeModel(name)\n      .subscribe(({ source, sourceModel }) => {\n        if (source === this.el.nativeElement) {\n          this.dragulaModelChange.emit(sourceModel);\n        }\n      })\n    );\n  }\n\n  public teardown(groupName: string): void {\n    if (this.subs) {\n      this.subs.unsubscribe();\n    }\n    const group = this.dragulaService.find(groupName);\n    if (group) {\n      const itemToRemove = group.drake.containers.indexOf(this.el.nativeElement);\n      if (itemToRemove !== -1) {\n        group.drake.containers.splice(itemToRemove, 1);\n      }\n      if (this.dragulaModel && group.drake && group.drake.models) {\n        let modelIndex = group.drake.models.indexOf(this.dragulaModel);\n        if (modelIndex !== -1) {\n          group.drake.models.splice(modelIndex, 1);\n        }\n      }\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.teardown(this.dragula);\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DragulaDirective } from './dragula.directive';\nimport { DragulaService } from './dragula.service';\n\n@NgModule({\n  exports: [DragulaDirective],\n  declarations: [DragulaDirective],\n})\nexport class DragulaModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DragulaModule,\n      providers: [DragulaService]\n    }\n  }\n}\n","import { Subject, Subscription } from 'rxjs';\nimport { DrakeWithModels } from './DrakeWithModels';\nimport { filter } from 'rxjs/operators';\nimport { EventTypes } from './EventTypes';\nimport { DragulaOptions } from './DragulaOptions';\nimport { DrakeFactory } from './DrakeFactory';\n\nexport const MockDrakeFactory = new DrakeFactory((containers, options) => {\n  return new MockDrake(containers, options);\n});\n\n/** You can use MockDrake to simulate Drake events.\n *\n * The three methods that actually do anything are `on(event, listener)`,\n * `destroy()`, and a new method, `emit()`. Use `emit()` to manually emit Drake\n * events, and if you injected MockDrake properly with MockDrakeFactory or\n * mocked the DragulaService.find() method, then you can make ng2-dragula think\n * drags and drops are happening.\n *\n * Caveats:\n *\n * 1. YOU MUST MAKE THE DOM CHANGES YOURSELF.\n * 2. REPEAT: YOU MUST MAKE THE DOM CHANGES YOURSELF.\n *    That means `source.removeChild(el)`, and `target.insertBefore(el)`.\n * 3. None of the other methods do anything.\n *    That's ok, because ng2-dragula doesn't use them.\n */\nexport class MockDrake implements DrakeWithModels {\n  /**\n   * @param containers A list of container elements.\n   * @param options These will NOT be used. At all.\n   * @param models Nonstandard, but useful for testing using `new MockDrake()` directly.\n   *               Note, default value is undefined, like a real Drake. Don't change that.\n   */\n  constructor(\n    public containers: Element[] = [],\n    public options: DragulaOptions = {},\n    public models?: any[][]\n  ) {}\n\n  /* Doesn't represent anything meaningful. */\n  dragging: boolean = false;\n\n  /* Does nothing useful. */\n  start(item: Element): any {\n    this.dragging = true;\n  }\n  /* Does nothing useful. */\n  end(): any {\n    this.dragging = false;\n  }\n  /* Does nothing useful. */\n  cancel(revert: boolean): any;\n  cancel(): any;\n  cancel(revert?: any) {\n    this.dragging = false;\n  }\n  /* Does nothing useful. */\n  remove(): any {\n    this.dragging = false;\n  }\n\n  // Basic but fully functional event emitter shim\n  private emitter$ = new Subject<{ eventType: EventTypes, args: any[] }>();\n\n  private subs = new Subscription();\n\n  on(event: string, callback: Function): any {\n    this.subs.add(this.emitter$\n      .pipe(\n        filter(({ eventType }) => eventType === event)\n      )\n      .subscribe(({ args }) => {\n        callback(...args);\n      }));\n  }\n\n  destroy(): any {\n    this.subs.unsubscribe();\n  }\n\n  /**\n   * This is the most useful method. You can use it to manually fire events that would normally\n   * be fired by a real drake.\n   *\n   * You're likely most interested in firing `drag`, `remove` and `drop`, the three events\n   * DragulaService uses to implement [dragulaModel].\n   *\n   * See https://github.com/bevacqua/dragula#drakeon-events for what you should emit (and in what order).\n   *\n   * (Note also, firing dropModel and removeModel won't work. You would have to mock DragulaService for that.)\n   */\n  emit(eventType: EventTypes, ...args: any[]) {\n    this.emitter$.next({ eventType, args })\n  }\n\n}\n"]}