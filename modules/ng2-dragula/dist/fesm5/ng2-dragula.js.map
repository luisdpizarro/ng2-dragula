{"version":3,"file":"ng2-dragula.js","sources":["ng://ng2-dragula/Group.ts","ng://ng2-dragula/EventTypes.ts","ng://ng2-dragula/DrakeFactory.ts","ng://ng2-dragula/components/dragula.service.ts","ng://ng2-dragula/components/dragula.directive.ts","ng://ng2-dragula/components/dragula.module.ts","ng://ng2-dragula/MockDrake.ts","ng://ng2-dragula/ng2-dragula.ts"],"sourcesContent":["import { DrakeWithModels } from \"./DrakeWithModels\";\nimport { DragulaOptions } from \"./DragulaOptions\";\n\nexport class Group {\n  public initEvents: boolean = false;\n  constructor(\n    public name: string,\n    public drake: DrakeWithModels,\n    public options: DragulaOptions\n  ) {}\n}\n","export enum EventTypes {\n    Cancel = \"cancel\",\n    Cloned = \"cloned\",\n    Drag = \"drag\",\n    DragEnd = \"dragend\",\n    Drop = \"drop\",\n    Out = \"out\",\n    Over = \"over\",\n    Remove = \"remove\",\n    Shadow = \"shadow\",\n    DropModel = \"dropModel\",\n    RemoveModel = \"removeModel\",\n}\n\nexport const AllEvents: EventTypes[] = Object.keys(EventTypes).map(k => EventTypes[k as any] as EventTypes);\n\n\n","import { DragulaOptions } from './DragulaOptions';\nimport { DrakeWithModels } from './DrakeWithModels';\nimport * as dragulaExpt from 'dragula';\nexport const dragula: (containers?: any, options?: any) => any = (dragulaExpt as any).default || dragulaExpt;\n\nexport type DrakeBuilder = (containers: any[], options: DragulaOptions) => DrakeWithModels;\n\nexport class DrakeFactory {\n  constructor (public build: DrakeBuilder = dragula) {}\n}\n\n","import { Injectable, Optional } from '@angular/core';\nimport { Group } from '../Group';\nimport { DragulaOptions } from '../DragulaOptions';\nimport { Subject, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { EventTypes, AllEvents } from '../EventTypes';\nimport { DrakeFactory } from '../DrakeFactory';\n\ntype FilterProjector<T extends { name: string; }> = (name: string, args: any[]) => T;\ntype Dispatch = { event: EventTypes; name: string; args: any[]; };\n\nconst filterEvent = <T extends { name: string; }>(\n  eventType: EventTypes,\n  filterDragType: string | undefined,\n  projector: FilterProjector<T>\n) => (input: Observable<Dispatch>): Observable<T> => {\n  return input.pipe(\n    filter(({ event, name }) => {\n      return event === eventType\n          && (filterDragType === undefined || name === filterDragType);\n    }),\n    map(({ name, args }) => projector(name, args))\n  );\n}\n\nconst elContainerSourceProjector =\n  (name: string, [el, container, source]: [Element, Element, Element]) =>\n    ({ name, el, container, source });\n\n@Injectable()\nexport class DragulaService {\n\n  /* https://github.com/bevacqua/dragula#drakeon-events */\n\n  private dispatch$ = new Subject<Dispatch>();\n\n  public drag = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Drag,\n      groupName,\n      (name, [el, source]: [Element, Element]) => ({ name, el, source })\n    )\n  );\n\n  public dragend = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.DragEnd,\n      groupName,\n      (name, [el]: [Element]) => ({ name, el })\n    )\n  );\n\n  public drop = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Drop,\n      groupName,\n      (name, [\n        el, target, source, sibling\n      ]: [Element, Element, Element, Element]) => {\n        return { name, el, target, source, sibling };\n      })\n  );\n\n  private elContainerSource =\n    (eventType: EventTypes) =>\n    (groupName?: string) =>\n    this.dispatch$.pipe(\n      filterEvent(eventType, groupName, elContainerSourceProjector)\n    );\n\n  public cancel = this.elContainerSource(EventTypes.Cancel);\n  public remove = this.elContainerSource(EventTypes.Remove);\n  public shadow = this.elContainerSource(EventTypes.Shadow);\n  public over = this.elContainerSource(EventTypes.Over);\n  public out = this.elContainerSource(EventTypes.Out);\n\n  public cloned = (groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.Cloned,\n      groupName,\n      (name, [\n        clone, original, cloneType\n      ]: [Element, Element, 'mirror' | 'copy']) => {\n        return { name, clone, original, cloneType }\n      })\n  );\n\n  public dropModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.DropModel,\n      groupName,\n      (name, [\n        el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex\n      ]: [Element, Element, Element, Element, T, T[], T[], number, number]) => {\n        return { name, el, target, source, sibling, item, sourceModel, targetModel, sourceIndex, targetIndex }\n      })\n  );\n\n  public removeModel = <T = any>(groupName?: string) => this.dispatch$.pipe(\n    filterEvent(\n      EventTypes.RemoveModel,\n      groupName,\n      (name, [\n        el, container, source, item, sourceModel, sourceIndex\n      ]: [Element, Element, Element, T, T[], number]) => {\n        return { name, el, container, source, item, sourceModel, sourceIndex }\n      }\n    )\n  );\n\n  private groups: { [k: string]: Group } = {};\n\n  constructor (@Optional() private drakeFactory: DrakeFactory = null) {\n    if (this.drakeFactory === null) {\n      this.drakeFactory = new DrakeFactory();\n    }\n  }\n\n  /** Public mainly for testing purposes. Prefer `createGroup()`. */\n  public add(group: Group): Group {\n    let existingGroup = this.find(group.name);\n    if (existingGroup) {\n      throw new Error('Group named: \"' + group.name + '\" already exists.');\n    }\n    this.groups[group.name] = group;\n    this.handleModels(group);\n    this.setupEvents(group);\n    return group;\n  }\n\n  public find(name: string): Group {\n    return this.groups[name];\n  }\n\n  public destroy(name: string): void {\n    let group = this.find(name);\n    if (!group) {\n      return;\n    }\n    group.drake && group.drake.destroy();\n    delete this.groups[name];\n  }\n\n  /**\n   * Creates a group with the specified name and options.\n   *\n   * Note: formerly known as `setOptions`\n   */\n  public createGroup<T = any>(name: string, options: DragulaOptions<T>): Group {\n    return this.add(new Group(\n      name,\n      this.drakeFactory.build([], options),\n      options\n    ));\n  }\n\n  private handleModels({ name, drake, options }: Group): void {\n    let dragElm: any;\n    let dragIndex: number;\n    let dropIndex: number;\n    drake.on('remove', (el: any, container: any, source: any) => {\n      if (!drake.models) {\n        return;\n      }\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\n      sourceModel = sourceModel.slice(0); // clone it\n      const item = sourceModel.splice(dragIndex, 1)[0];\n      // console.log('REMOVE');\n      // console.log(sourceModel);\n      this.dispatch$.next({\n        event: EventTypes.RemoveModel,\n        name,\n        args: [ el, container, source, item, sourceModel, dragIndex ]\n      });\n    });\n    drake.on('drag', (el: any, source: any) => {\n      if (!drake.models) {\n        return;\n      }\n      dragElm = el;\n      dragIndex = this.domIndexOf(el, source);\n    });\n    drake.on('drop', (dropElm: any, target: Element, source: Element, sibling?: Element) => {\n      if (!drake.models || !target) {\n        return;\n      }\n      dropIndex = this.domIndexOf(dropElm, target);\n      let sourceModel = drake.models[drake.containers.indexOf(source)];\n      let targetModel = drake.models[drake.containers.indexOf(target)];\n      // console.log('DROP');\n      // console.log(sourceModel);\n      let item: any;\n      if (target === source) {\n        sourceModel = sourceModel.slice(0)\n        item = sourceModel.splice(dragIndex, 1)[0];\n        sourceModel.splice(dropIndex, 0, item);\n        // this was true before we cloned and updated sourceModel,\n        // but targetModel still has the old value\n        targetModel = sourceModel;\n      } else {\n        let isCopying = dragElm !== dropElm;\n        item = sourceModel[dragIndex];\n        if (isCopying) {\n          if (!options.copyItem) {\n            throw new Error(\"If you have enabled `copy` on a group, you must provide a `copyItem` function.\")\n          }\n          item = options.copyItem(item);\n        }\n\n        if (!isCopying) {\n          sourceModel = sourceModel.slice(0)\n          sourceModel.splice(dragIndex, 1);\n        }\n        targetModel = targetModel.slice(0)\n        targetModel.splice(dropIndex, 0, item);\n        if (isCopying) {\n          try {\n            target.removeChild(dropElm);\n          } catch (e) {}\n        }\n      }\n      this.dispatch$.next({\n        event: EventTypes.DropModel,\n        name,\n        args: [ dropElm, target, source, sibling, item, sourceModel, targetModel, dragIndex, dropIndex ]\n      });\n    });\n  }\n\n  private setupEvents(group: Group): void {\n    if (group.initEvents) {\n      return;\n    }\n    group.initEvents = true;\n    const name = group.name;\n    let that: any = this;\n    let emitter = (event: EventTypes) => {\n      group.drake.on(event, (...args: any[]) => {\n        this.dispatch$.next({ event, name, args });\n      });\n    };\n    AllEvents.forEach(emitter);\n  }\n\n  private domIndexOf(child: any, parent: any): any {\n    return Array.prototype.indexOf.call(parent.children, child);\n  }\n}\n","import { Directive, Input, Output, ElementRef, OnInit, OnChanges, OnDestroy, SimpleChange, EventEmitter } from '@angular/core';\nimport { DragulaService } from './dragula.service';\nimport { DrakeWithModels } from '../DrakeWithModels';\nimport { Subscription } from 'rxjs';\nimport { Group } from '../Group';\n\n@Directive({selector: '[dragula]'})\nexport class DragulaDirective implements OnChanges, OnDestroy {\n  @Input() public dragula: string;\n  @Input() public dragulaModel: any[];\n  @Output() public dragulaModelChange = new EventEmitter<any[]>();\n\n  private subs: Subscription;\n\n  private get container(): HTMLElement {\n    return this.el && this.el.nativeElement;\n  }\n  private group: Group;\n\n  public constructor(private el: ElementRef, private dragulaService: DragulaService) {\n  }\n\n  public ngOnChanges(changes: {dragula?: SimpleChange, dragulaModel?: SimpleChange}): void {\n    if (changes && changes.dragula) {\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragula;\n      let hadPreviousValue = !!prev;\n      let hasNewValue = !!current;\n      // something -> null       =>  teardown only\n      // something -> something  =>  teardown, then setup\n      //      null -> something  =>  setup only\n      //\n      //      null -> null (precluded by fact of change being present)\n      if (hadPreviousValue) {\n        this.teardown(prev);\n      }\n      if (hasNewValue) {\n        this.setup();\n      }\n    } else if (changes && changes.dragulaModel) {\n      // this code only runs when you're not changing the group name\n      // because if you're changing the group name, you'll be doing setup or teardown\n      // it also only runs if there is a group name to attach to.\n      const { previousValue: prev, currentValue: current, firstChange } = changes.dragulaModel;\n      const { drake } = this.group;\n      if (this.dragula && drake) {\n        drake.models = drake.models || [];\n        let prevIndex = drake.models.indexOf(prev);\n        if (prevIndex !== -1) {\n          // delete the previous\n          drake.models.splice(prevIndex, 1);\n          // maybe insert a new one at the same spot\n          if (!!current) {\n            drake.models.splice(prevIndex, 0, current);\n          }\n        } else if (!!current) {\n          // no previous one to remove; just push this one.\n          drake.models.push(current);\n        }\n      }\n    }\n  }\n\n  // call ngOnInit 'setup' because we want to call it in ngOnChanges\n  // and it would otherwise run twice\n  public setup(): void {\n    let checkModel = (group: Group) => {\n      if (this.dragulaModel) {\n        if (group.drake.models) {\n          group.drake.models.push(this.dragulaModel);\n        } else {\n          group.drake.models = [this.dragulaModel];\n        }\n      }\n    };\n\n    // find or create a group\n    let group = this.dragulaService.find(this.dragula);\n    if (!group) {\n      let options = {};\n      group = this.dragulaService.createGroup(this.dragula, options);\n    }\n\n    // ensure model and container element are pushed\n    checkModel(group);\n    group.drake.containers.push(this.container);\n    this.subscribe(this.dragula);\n\n    this.group = group;\n  }\n\n  public subscribe(name: string) {\n    this.subs = new Subscription();\n    this.subs.add(\n      this.dragulaService\n      .dropModel(name)\n      .subscribe(({ source, target, sourceModel, targetModel }) => {\n        if (source === this.el.nativeElement) {\n          this.dragulaModelChange.emit(sourceModel);\n        } else if (target === this.el.nativeElement) {\n          this.dragulaModelChange.emit(targetModel);\n        }\n      })\n    );\n    this.subs.add(\n      this.dragulaService\n      .removeModel(name)\n      .subscribe(({ source, sourceModel }) => {\n        if (source === this.el.nativeElement) {\n          this.dragulaModelChange.emit(sourceModel);\n        }\n      })\n    );\n  }\n\n  public teardown(groupName: string): void {\n    if (this.subs) {\n      this.subs.unsubscribe();\n    }\n    const group = this.dragulaService.find(groupName);\n    if (group) {\n      const itemToRemove = group.drake.containers.indexOf(this.el.nativeElement);\n      if (itemToRemove !== -1) {\n        group.drake.containers.splice(itemToRemove, 1);\n      }\n      if (this.dragulaModel && group.drake && group.drake.models) {\n        let modelIndex = group.drake.models.indexOf(this.dragulaModel);\n        if (modelIndex !== -1) {\n          group.drake.models.splice(modelIndex, 1);\n        }\n      }\n    }\n  }\n\n  public ngOnDestroy(): void {\n    this.teardown(this.dragula);\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { DragulaDirective } from './dragula.directive';\nimport { DragulaService } from './dragula.service';\n\n@NgModule({\n  exports: [DragulaDirective],\n  declarations: [DragulaDirective],\n})\nexport class DragulaModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: DragulaModule,\n      providers: [DragulaService]\n    }\n  }\n}\n","import { Subject, Subscription } from 'rxjs';\nimport { DrakeWithModels } from './DrakeWithModels';\nimport { filter } from 'rxjs/operators';\nimport { EventTypes } from './EventTypes';\nimport { DragulaOptions } from './DragulaOptions';\nimport { DrakeFactory } from './DrakeFactory';\n\nexport const MockDrakeFactory = new DrakeFactory((containers, options) => {\n  return new MockDrake(containers, options);\n});\n\n/** You can use MockDrake to simulate Drake events.\n *\n * The three methods that actually do anything are `on(event, listener)`,\n * `destroy()`, and a new method, `emit()`. Use `emit()` to manually emit Drake\n * events, and if you injected MockDrake properly with MockDrakeFactory or\n * mocked the DragulaService.find() method, then you can make ng2-dragula think\n * drags and drops are happening.\n *\n * Caveats:\n *\n * 1. YOU MUST MAKE THE DOM CHANGES YOURSELF.\n * 2. REPEAT: YOU MUST MAKE THE DOM CHANGES YOURSELF.\n *    That means `source.removeChild(el)`, and `target.insertBefore(el)`.\n * 3. None of the other methods do anything.\n *    That's ok, because ng2-dragula doesn't use them.\n */\nexport class MockDrake implements DrakeWithModels {\n  /**\n   * @param containers A list of container elements.\n   * @param options These will NOT be used. At all.\n   * @param models Nonstandard, but useful for testing using `new MockDrake()` directly.\n   *               Note, default value is undefined, like a real Drake. Don't change that.\n   */\n  constructor(\n    public containers: Element[] = [],\n    public options: DragulaOptions = {},\n    public models?: any[][]\n  ) {}\n\n  /* Doesn't represent anything meaningful. */\n  dragging: boolean = false;\n\n  /* Does nothing useful. */\n  start(item: Element): any {\n    this.dragging = true;\n  }\n  /* Does nothing useful. */\n  end(): any {\n    this.dragging = false;\n  }\n  /* Does nothing useful. */\n  cancel(revert: boolean): any;\n  cancel(): any;\n  cancel(revert?: any) {\n    this.dragging = false;\n  }\n  /* Does nothing useful. */\n  remove(): any {\n    this.dragging = false;\n  }\n\n  // Basic but fully functional event emitter shim\n  private emitter$ = new Subject<{ eventType: EventTypes, args: any[] }>();\n\n  private subs = new Subscription();\n\n  on(event: string, callback: Function): any {\n    this.subs.add(this.emitter$\n      .pipe(\n        filter(({ eventType }) => eventType === event)\n      )\n      .subscribe(({ args }) => {\n        callback(...args);\n      }));\n  }\n\n  destroy(): any {\n    this.subs.unsubscribe();\n  }\n\n  /**\n   * This is the most useful method. You can use it to manually fire events that would normally\n   * be fired by a real drake.\n   *\n   * You're likely most interested in firing `drag`, `remove` and `drop`, the three events\n   * DragulaService uses to implement [dragulaModel].\n   *\n   * See https://github.com/bevacqua/dragula#drakeon-events for what you should emit (and in what order).\n   *\n   * (Note also, firing dropModel and removeModel won't work. You would have to mock DragulaService for that.)\n   */\n  emit(eventType: EventTypes, ...args: any[]) {\n    this.emitter$.next({ eventType, args })\n  }\n\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["dragulaExpt.default","tslib_1.__param","tslib_1.__decorate"],"mappings":"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"}